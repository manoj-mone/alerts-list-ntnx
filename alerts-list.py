  
'''
    ##############################################################################
    #   Script Name: Generate a HTML and CSV output of all Alerts generated by Prism
    #   Author: manoj.mone@nutanix.com
    ##############################################################################
    
# synopsis
# This app enables you to list the alerts stats from your cluster. 
    
.disclaimer
    This code is intended as a standalone example.  Subject to licensing restrictions defined on nutanix.dev, this can be downloaded, copied and/or modified in any way you see fit.
    Please be aware that all public code samples provided by Nutanix are unofficial in nature, are provided as examples only, are unsupported and will need to be heavily scrutinized and potentially modified before they can be used in a production environment.  All such code samples are provided on an as-is basis, and Nutanix expressly disclaims all warranties, express or implied.
 
    All code samples are Â© Nutanix, Inc., and are provided as-is under the MIT license. (https://opensource.org/licenses/MIT)
'''

import json
import math
from datetime import datetime
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import pandas as pd

# Use the Nutanix v2 alerts API to get all the alerts and generate a response

from request import request_details

ip, auth = request_details()

URL = "https://{}:9440/api/nutanix/v2.0/alerts/".format(ip)
header = {"content-type": "application/json"}
response_list = []
res = requests.get(url=URL, auth=auth, headers=header, params={'count':1}, verify=False)
total_entities = res.json().get('metadata').get('total_entities')
total_pages = math.ceil(total_entities/1000)

for page in range(1, total_pages + 1):
    response = requests.get(url=URL, auth=auth, headers=header, params={'count':1000, 'page':page}, verify=False)
    response_list.append(response)


# Generate a pandas dataframe with all the alerts
df = pd.DataFrame(columns=['Created-Time','Id','Title','Alert Type','Resolved','Cluster','Message','Severity', ])

index = 0
for response in range(total_pages):
    for item in response_list[response].json().get('entities'):
        new_list = []
        new_list.append(item.get('created_time_stamp_in_usecs'))
        new_list.append(item.get('id'))
        new_list.append(item.get('alert_title'))
        new_list.append(item.get('alert_type_uuid'))
        new_list.append(item.get('resolved'))
        new_list.append(item.get('cluster_uuid'))
        new_list.append(item.get('message'))
        new_list.append(item.get('severity')[1:])
        df.loc[index] = new_list
        index += 1

# Modify the Alert creation time/date from microseconds to date
df['Created-Time'] = pd.to_datetime(df['Created-Time'], origin='unix', unit='us')
# df['Created-Time'] = df['Created-Time'].dt.date


# Get Cluster Nme
URL_Cluster = "https://{}:9440/api/nutanix/v1/clusters".format(ip)
header = {"content-type": "application/json"}
cluster_response_list = []
cluster_res = requests.get(url=URL_Cluster, auth=auth, headers=header, params={'count':1}, verify=False)
cluster_total_entities = cluster_res.json().get('metadata').get('grandTotalEntities')
cluster_total_pages = math.ceil(cluster_total_entities/1000)

for cluster_page in range(1, cluster_total_pages + 1):
    cluster_response = requests.get(url=URL_Cluster, auth=auth, headers=header, params={'count':1000, 'page':cluster_page}, verify=False)
    cluster_response_list.append(cluster_response)

# Generate a pandas dataframe with uuid and name of all the clusters
df1 = pd.DataFrame(columns=['Cluster uuid','Cluster Name', ])

cluster_index = 0
for cluster_response in range(cluster_total_pages):
    for item in cluster_response_list[cluster_response].json().get('entities'):
            cluster_list = []
            cluster_list.append(item.get('uuid'))
            cluster_list.append(item.get('name'))
            df1.loc[cluster_index] = cluster_list
            cluster_index += 1

m = df1.set_index('Cluster uuid')['Cluster Name'].to_dict()
v = df.filter(like='Cluster')
df[v.columns] = v.replace(m)

df.sort_values(by=['Created-Time'], inplace=True)

#render dataframe as html
html =df.to_html()

#write html to file
text_file = open("alerts_data.html", "w")
text_file.write(html)
text_file.close()

#render dataframe as csv
df.to_csv('alerts_data.csv', index=False)
'''
#render cluster dataframe as html
cluster_html =df1.to_html()

#write html to file
text_file = open("alerts_data_cluster_list.html", "w")
text_file.write(cluster_html)
text_file.close()

#render dataframe as csv
df1.to_csv('alerts_data_cluster_list.csv', index=False)
'''
