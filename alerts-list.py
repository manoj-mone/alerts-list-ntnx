  

    ##############################################################################
    #   Script Name: Generate a HTML and CSV output of all Alerts generated by Prism
    #   Author: manoj.mone@nutanix.com
    ##############################################################################
    
# synopsis
# This app enables you to list the alerts stats from your cluster. 
    


import json
import math
from datetime import datetime
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import pandas as pd

# Use the Nutanix v2 alerts API to get all the alerts and generate a response

from request import request_details

ip, auth = request_details()

URL = "https://{}:9440/api/nutanix/v2.0/alerts/".format(ip)
header = {"content-type": "application/json"}
response_list = []
res = requests.get(url=URL, auth=auth, headers=header, params={'count':1}, verify=False)
total_entities = res.json().get('metadata').get('total_entities')
total_pages = math.ceil(total_entities/1000)

for page in range(1, total_pages + 1):
    response = requests.get(url=URL, auth=auth, headers=header, params={'count':1000, 'page':page}, verify=False)
    response_list.append(response)


# Generate a pandas dataframe with all the alerts
df = pd.DataFrame(columns=['Created-Time','Id','Title','Alert Type','Resolved','Cluster uuid','Message','Severity', ])

index = 0
for response in range(total_pages):
    for item in response_list[response].json().get('entities'):
        new_list = []
        new_list.append(item.get('created_time_stamp_in_usecs'))
        new_list.append(item.get('id'))
        new_list.append(item.get('alert_title'))
        new_list.append(item.get('alert_type_uuid'))
        new_list.append(item.get('resolved'))
        new_list.append(item.get('cluster_uuid'))
        new_list.append(item.get('message'))
        new_list.append(item.get('severity')[1:])
        df.loc[index] = new_list
        index += 1

# Modify the Alert creation time/date from microseconds to date
df['Created-Time'] = pd.to_datetime(df['Created-Time'], origin='unix', unit='us')
# df['Created-Time'] = df['Created-Time'].dt.date

df.sort_values(by=['Created-Time'], inplace=True)

#render dataframe as html
html =df.to_html()

#write html to file
text_file = open("alerts_data.html", "w")
text_file.write(html)
text_file.close()

#render dataframe as csv
df.to_csv('alerts_data.csv', index=False)